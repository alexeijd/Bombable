<PropertyList>
    
    <!-- Nasal code -->
	<nasal>
	  

		<load>
			<![CDATA[
			print("Loading jeep ", cmdarg().getPath());

      var nodeName=cmdarg().getPath();
      
      ##checks whether it has been initialized already; if so, just return
      if ( bombable.check_overall_initialized (nodeName) ) return;

			
			#listener function to change livery color if value is change (via dialogue for instance)
			var jeep_change_color = func(myTankNodeName) {
          
          var damageValue = getprop(""~myTankNodeName~"/bombable/attributes/damage");
          if (damageValue==nil) damageValue=0;
          
          var use_red = getprop("/ai/jeep/usered");
          
          if (use_red) var base_color = "Models/red"
          else var base_color = "Models/camo";
          
          bombable.set_livery (cmdarg().getPath(), 
            [ base_color~".png", 
             base_color~"2.png", 
             base_color~"3.png" ]);
          
          
      		if((damageValue >= 0.15) and (damageValue < 1.0))
				  	setprop(""~myTankNodeName~"/bombable/texture-corps-path", base_color~"2.png");
					elsif(damageValue == 1.0)
						setprop(""~myTankNodeName~"/bombable/texture-corps-path" , base_color~"3.png");
					else 
						setprop(""~myTankNodeName~"/bombable/texture-corps-path" , base_color~".png");
          
      }
			

			
			# Set up Jeep Menu with livery change option
			
			var init_jeep_dialogs = func () {
        
        #only do this once even if we have multiple jeeps loaded in this scenario
        if (getprop ("ai/jeep/init_jeep_dialogs")) return;  #it's been done already, so exit
        props.globals.getNode ("ai/jeep/init_jeep_dialogs", 1).setBoolValue(1); #so we know it's been done
        
        #we use aircraft. here just as a convenient referable object to add
        # this object to.  This object ("me") has some wacky name like
        # "c:/Program Files/FlightGear/data/AI/M1-Abrams/m1.xml" - this is not 
        # only long & complex but will change depending on the system
        # FG is running on.          
        aircraft.jeep_dlg_config = gui.Dialog.new("ai/jeep/config/dialog","AI/Aircraft/jeep-bombable/Dialogs/config.xml");
				
				#aircraft.jeep_dlg_config.toggle();
        
        #Doing this via a hot key wouldwork too but the menu option seems better
        #making the keyboard option unnecessary
        setprop ("/input/keyboard/key[15]", "desc", "change Jeep livery color");
        setprop ("/input/keyboard/key[15]", "name", "Ctrl-O");      
        setprop ("/input/keyboard/key[15]/binding", "command", "nasal");
        setprop ("/input/keyboard/key[15]/binding", "module", "__kbd");
        setprop ("/input/keyboard/key[15]/binding", "script", "aircraft.jeep_dlg_config.toggle()");
   
        #make the GUI menu
        props.globals.getNode ("/sim/menubar/default/menu[98]/enabled", 1).setBoolValue(1);
        props.globals.getNode ("/sim/menubar/default/menu[98]/label", 1).setValue("Jeep");
        props.globals.getNode ("/sim/menubar/default/menu[98]/item/enabled", 1).setBoolValue(1);
        #Note: the label must be distinct from all other labels in the menubar
        #or you will get duplicate functionality with the other menu item
        #sharing the same label
        props.globals.getNode ("/sim/menubar/default/menu[98]/item/label", 1).setValue("Change Jeep livery color");
        props.globals.getNode ("/sim/menubar/default/menu[98]/item/binding/command", 1).setValue("nasal");
        props.globals.getNode ("/sim/menubar/default/menu[98]/item/binding/script", 1).setValue("aircraft.jeep_dlg_config.open()");
        
       #reinit makes the property changes to both the GUI & input become active 
       #fgcommand("reinit");
       #As of FG 2.4.0, a straight "reinit" leads to FG crash or the dreaded NAN issue
       #at least with some aircraft.  Reinit/gui (as below) gets around this problem.
       #fgcommand("reinit", props.Node.new({subsystem : "gui"}));
       #OK . . . per gui.nas line 63, this appears to be the right way to do this:
       settimer (func { fgcommand ("gui-redraw"); }, 20);       
       
      }
			

############################################
#Jeep INITIALIZER
			var jeep_init = func() {
				# Datas of this tank are under: cmdarg().getPath()
				var tankNodeName = cmdarg().getPath();
				var tankNode = props.globals.getNode(tankNodeName);
				# Add some useful nodes

				#set to use red color (high visibility) by default
				props.globals.getNode ("ai/jeep/usered", 1).setBoolValue(1);
				# function to change color of tank if it is changed in the master dialog box
				setlistener("ai/jeep/usered", func { jeep_change_color (tankNodeName); });
				

			  var use_red = getprop("/ai/jeep/usered");
          
        if (use_red) var base_color = "Models/red"
        else var base_color = "Models/camo";
        
       
        var color1 = base_color~".png";
        var color2 = base_color~"2.png"; 
        var color3 = base_color~"3.png";
          
        init_jeep_dialogs ();
        
				
				tankNode.getNode("bombable/texture-corps-path", 1).setValue(base_color~".png");

				tankNode.getNode("surface-positions/cannon-elev-deg", 1).setDoubleValue(0.0);
				tankNode.getNode("surface-positions/turret-pos-deg", 1).setDoubleValue(0.0);
					


      
        
			  ########################################################################
        ########################################################################
        # INITIALIZE BOMBABLE
        # 
        # Initialize constants and main routines for maintaining altitude
        # relative to ground-level, relocating after file/reset, and 
        # creating bombable/shootable objects.
        # 
        # These routines are found in FG/nasal/bombable.nas
        #  
        ########################################################################               
        # INITIALIZE BOMBABLE Object
        # This object will be slurped in the object's node as a child
        # node named "bombable".                 
        # All distances are specified in meters.
        # All altitudes are relative to current ground level at the object's 
        # location
        # 
         
        thisNodeName = cmdarg().getPath(); 

        var bombableObject = {  
          
          
          objectNodeName : thisNodeName,
          objectNode : props.globals.getNode(thisNodeName),
          updateTime_s : 2/3, #time, in seconds, between the updates that 
          #keep the object at its AGL. Tradeoff is high-speed updates look more
          #realistic but slow down the framerate/cause jerkiness.  Faster-moving
          #objects will need more frequent updates to look realistic.
          #Update Time faster than about 1/3 seems to noticeably 
          #slow the frame rate          

		                        
          #########################################                              
          # ALTITUDE DEFINITIONS
          #         
          # all in meters
          #                     
          altitudes : {	
            wheelsOnGroundAGL_m : 0 , #altitude correction to add to your aircraft or ship that is needed to put wheels on ground (or, for a ship, make it float in the water at the correct level).  For most objects this is 0 but some models need a small correction to place them exactly at ground level
            
            minimumAGL_m : 0, #minimum altitude above ground level this object is allowed to fly
            maximumAGL_m : 0, #maximum altitude AGL this object is allowed to fly	    
            crashedAGL_m : -0.24, #altitude AGL when crashed.  Ships will sink to this level, aircraft or vehicles will sink into the ground as landing gear collapses or tires deflate. Should be negative, even just -0.001.
          },
          #  
          #########################################
          # VELOCITIES DEFINITIONS
          # 
          velocities : {               
            maxSpeedReduce_percent : 10, #max % to reduce speed, per step, when damaged
            minSpeed_kt : 0, #minimum speed to reduce to when damaged.  Ground vehicles and ships might stop completely when damaged but aircraft will need a minimum speed so they keep moving until they hit the ground.
            cruiseSpeed_kt : 30, #cruising speed, typical/optimal cruising speed, V C for aircraft
            
            attackSpeed_kt : 60, #typical/optimal speed when aggressively attacking or evading, in
                                 #level flight for aircraft
            
            maxSpeed_kt : 90 , #Maximum possible speed under dive or downhill conditions, V NE for aircraft
            
    
            damagedAltitudeChangeMaxRate_meterspersecond : 0.02, #max rate to sink or fly downwards when damaged, in meters/second
          },
          #  
          #########################################
          # EVASION DEFINITIONS
          # 
          # The evasion system makes the AI objectdodge when they come under
          # fire. 
          evasions : {               
            dodgeDelayMax_sec : 15, #max time to delay/wait between dodges
            dodgeDelayMin_sec : 5, #minimum time to delay/wait between dodges
            dodgeMax_deg : 120, #Max amount to turn when dodging
            dodgeMin_deg : 30, #minimum amount to turn when dodging 
            dodgeROverLPreference_percent : 50, # Preference for right turns vs. left when dodging.  90% means 90% right turns, 50% means 50% right turns.
            dodgeAltMin_m : 0, #Aircraft will begin to move up or down 
            dodgeAltMax_m : 0, #Max & Min are relative to current alt  
          }, 
          #  
          #########################################
          # ATTACK DEFINITIONS
          # 
          # The attack system makes the AI aircraft turn and fly towards 
          # other aircraft 
          attacks : {               
            maxDistance_m : 500, #max distance to turn & attack main aircraft
            minDistance_m : 1, #min distance to turn & attack main aircraft, 
               #ie, fly away this far before turning to attack again.  If you 
               #make this short it will be more like a turning fighter (Zero),
               #longer will become more like an energy fighter that zooms
               #way out, turns around, etc.
            
            continueAttackAngle_deg : 60, #when within minDistance_m, the aircraft will continue to turn towards the main aircraft and attack *if* if the angle is less than this amount from dead ahead.  A wider angle will make it work more like a twisty/turning fighter, narrower angle more like an energy fighter.
            altitudeHigherCutoff_m : 500, # will attack the main aircraft unless this amount higher than it or more
            altitudeLowerCutoff_m : 400, # will attack the main aircraft unless this amount lower than it or more 
            rollMin_deg : 0, #when turning on attack, roll to this angle min
            rollMax_deg : 0, #when turning on attack, roll to this angle max
            climbPower : 0, # How powerful the aircraft is when climbing during an attack; 4000 would be typical for, say a Zero--scale accordingly for others; higher is stronger
            divePower : 0, # How powerful the aircraft is when diving during and attack; 6000 typical of a Zero--could be much more than climbPower if the aircraft is a weak climber but a strong diver             
            attackCheckTime_sec : 10, # check for need to attack/correct course this often  
            attackCheckTimeEngaged_sec : 1, # once engaged with enemy, check/update course this frequently

    
          },
          
          #  
          #########################################
          # WEAPONS DEFINITIONS
          # 
          # The weapons system makes the AI aircraft fire on the main aircraft 
          # You can define any number of weapons--just enclose each in curly brackets
          # and separate with commas (,).           
          weapons : {
             front_gun :  #internal name - this can be any name you want; must be a valid nasal variable name
              {               
                name : "Machine Gun", # name presented to users, ie in on-screen messages
                maxDamage_percent : 3, # maximum percentage damage one hit from the aircraft's main weapon/machine guns will do to an opponent
                maxDamageDistance_m : 700, # maximum distance at which the aircrafts main weapon/maching guns will be able to damage an opponent
                weaponAngle_deg  :  { heading: 0, elevation: 45 }, # direction the aircraft's main weapon is aimed.   
                                                                  # 0,0 = straight ahead, 90,0=directly right, 0,90=directly up, 0,180=directly back, etc.
                weaponOffset_m : {x:2, y:0, z:0}, # Offset of the weapon from the main aircraft center
              },    
          },  
          

                   
          #  
          #########################################
          # DIMENSION DEFINITIONS
          # 
          # all in meters          
          #           
          dimensions : {                  
            width_m : 4,  #width of your object, ie, for aircraft, wingspan
            length_m : 7, #length of your object, ie, for aircraft, distance nose to tail
            height_m : 3, #height of your object, ie, for aircraft ground to highest point when sitting on runway
            damageRadius_m : 3.5, #typically 1/2 the longest dimension of the object. Hits within this distance of the 
                                #center of object have some possibility of damage
            vitalDamageRadius_m : 2.3, #typically the radius of the fuselage or cockpit or other most 
                                     # vital area at the center of the object.  Always smaller than damageRadius_m 
          },
          #
          #########################################
          # VULNERABILITIES DEFINITIONS        
          #
          vulnerabilities : {                   
            damageVulnerability : 100, #Vulnerability to damage from armament, 1=normal M1 tank; higher to make objects easier to kill and lower to make them more difficult.  This is a multiplier, so 5 means 5X easier to kill than an M1, 1/5 means 5X harder to kill. 
            
            engineDamageVulnerability_percent : 7, #Chance that a small-caliber machine-gun round will damage the engine.       
            
            fireVulnerability_percent : 59, #Vulnerability to catching on fire. 100% means even the slightest impact will set it on fire; 20% means quite difficult to set on fire; 0% means set on fire only when completely damaged; -1% means never set on fire.                          
            
            fireDamageRate_percentpersecond : 0.7, #Amount of damage to add, per second, when on fire.  100%=completely damaged.
            
            fireExtinguishMaxTime_seconds : 50, #Once a fire starts, for this many seconds there is a chance to put out the fire; fires lasting longer than this won't be put out until the object burns out.
            
            fireExtinguishSuccess_percentage : 40, #Chance of the crew putting out the fire within the MaxTime above.
            
            explosiveMass_kg : 1400 , #mass of the object in KG, but give at least a 2-10X bonus to anything carrying flammables or high explosives.
          },
          #
          #########################################
          # LIVERY DEFINITIONS
          #
          # Path to livery files to use at different damage levels.
          # Path is relative to the AI aircraft's directory.
          # The object will start with the first livery listed and 
          # change to succeeding liveries as the damage
          # level increases. The final livery should indicate full damage/
          # object destroyed.        
          # 
          # If you don't want to specify any special liveries simply set 
          # damageLivery : nil and the object's normal livery will be used.  
          #                                                            
          damageLiveries : {
            damageLivery : [  base_color~".png",
                              base_color~"2.png", 
                              base_color~"3.png",
                           ]                        
          },
                            
        };

        #########################################
        # INITIALIZE ROUTINES
        # 
        # OVERALL INITIALIZER: Needed to make all the others work
        bombable.initialize ( bombableObject );
        #
        # LOCATION: Relocate object to maintain its position after file/reset       
        bombable.location_init ( thisNodeName );
        #
        # GROUND: Keep object at altitude relative to ground level
        bombable.ground_init ( thisNodeName );
        #
        # WEAPONS: Make the object shoot the main aircraft        
        bombable.weapons_init ( thisNodeName );        
        #
        # BOMBABLE: Make the object bombable/damageable        
        bombable.bombable_init ( thisNodeName );
        #
        # SMOKE/CONTRAIL: Start a flare, contrail, smoke trail, or exhaust 
        # trail for the object.
        # Smoke types available: flare, jetcontrail, pistonexhaust, smoketrail,
        # damagedengine                        
        bombable.startSmoke("flare", thisNodeName );
        #
        # END INITIALIZE BOMBABLE
        ########################################################################
        ########################################################################                
	      


			
				
			};

      	
			jeep_init();
			]]>
		</load>
		<unload>
			<![CDATA[
			print("Unload jeep.");

      ########################################################################
      ########################################################################                
			# BOMBABLE DESTRUCTORS      			
			# 			
      var nodeName= cmdarg().getPath();  
      bombable.de_overall_initialize( nodeName );
      bombable.initialize_del( nodeName );
      bombable.ground_del( nodeName );
      bombable.location_del (nodeName);      
      bombable.bombable_del( nodeName );  
      bombable.weapons_del (nodeName);         
      #
	    ########################################################################
      ########################################################################                

#  </unload>

			]]>
		</unload>
 </nasal>  
</PropertyList>
